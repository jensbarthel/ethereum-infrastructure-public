name: Create-DO-Cluster

on:
  workflow_dispatch:
    inputs:
      stage:
        description: "Stage descriptor [qa|prod]"
        required: true

env:
  K8S_VERSION: 1.20.2-do.0
  ETHEREUM_NAMESPACE: ethereum
  INGRESS_NAMESPACE: nginx-ingress
  CERT_MANAGER_NAMESPACE: cert-manager

jobs:
  create-cluster:
    name: Create the Digital Ocean cluster
    runs-on: ubuntu-latest
    steps:

      - name: Set the stage
        run: |
          if [ ${{ github.event.inputs.stage }} = "qa" ]; then
            echo "Setting qa environment"
            echo "STAGE=qa" >> $GITHUB_ENV
            echo "CLUSTER_NAME=elmo" >> $GITHUB_ENV
            echo "NODE_COUNT=1" >> $GITHUB_ENV
          elif [ ${{ github.event.inputs.stage }} = "prod" ]; then
            echo "Setting prod environment"
            echo "STAGE=prod" >> $GITHUB_ENV
            echo "CLUSTER_NAME=kermit" >> $GITHUB_ENV
            echo "NODE_COUNT=1" >> $GITHUB_ENV
          else
            echo "Stage ${{ github.event.inputs.stage }} does not match [qa|prod]"
            exit 1
          fi


      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITAL_OCEAN_API_TOKEN }}
      - name: Create cluster
        run: |
          if ! $(doctl kubernetes cluster get ${CLUSTER_NAME} &> /dev/null); then
            echo "Creating cluster ${CLUSTER_NAME}"
            doctl kubernetes cluster create ${CLUSTER_NAME} \
                        --node-pool "name=${CLUSTER_NAME}-nodepool;size=s-4vcpu-8gb;count=${NODE_COUNT}" \
                        --region fra1 \
                        --version ${K8S_VERSION} \
                        --wait
          else
            echo "Cluster ${EKS_CLUSTER_NAME} already created"
          fi

      - name: Install kubectl
        uses: azure/setup-kubectl@v1

      - name: Create kubeconfig
        run: |
          doctl kubernetes cluster kubeconfig save ${CLUSTER_NAME}

      - name: Create necessary namespaces
        run: |
          kubectl create namespace ${ETHEREUM_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace ${INGRESS_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace ${CERT_MANAGER_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -

      - name: Install helm
        uses: azure/setup-helm@v1

      - name: Checkout code base
        uses: actions/checkout@v2

      - name: Add necessary helm repos
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo add jetstack https://charts.jetstack.io
          helm repo update


      - name: Install nginx ingress controller
        run: |
          helm upgrade ${INGRESS_NAMESPACE} ingress-nginx/ingress-nginx \
            -i \
            --namespace nginx-ingress \
            --set controller.publishService.enabled=true

      - name: Install cert manager
        run: |
          helm upgrade cert-manager jetstack/cert-manager \
            -i \
            --namespace ${CERT_MANAGER_NAMESPACE} \
            --version v1.2.0 \
            --set installCRDs=true \
            --wait


      - name: Install cluster issuer
        env:
          PROVISION_CHARTS_PATH: provision/digitalocean
          EMAIL_ADDRESS: jens.barthel@gmail.com
        run: |
          helm upgrade cluster-issuer ${PROVISION_CHARTS_PATH}/cert-manager-resources \
            -i \
            --namespace ${CERT_MANAGER_NAMESPACE} \
            -f ${PROVISION_CHARTS_PATH}/cert-manager-resources/values.yaml \
            --set stage=${STAGE} \
            --set acme.emailAddress=${EMAIL_ADDRESS}
